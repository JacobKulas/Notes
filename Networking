Tatu YlÃ¶nen - developer of SSH

Used to find how ports were open according to tcp full or half scan
---
tcpdump -n -r /usr/share/cctc/capstone-bpf.pcap 'ip[12:4] = 0x0a000068 and tcp' | grep "Flags \[S\.\]" | wc -l
---
OSI
Layer          PDU
----------------------------
Application  | Data
Presentation | Data
Session      | Data
Transport    | Segment/Datagram
Network      | Packet
Data Link    | Frame
Physical     | Bit

-----------------------
MAC Address Types:

Unicast- one to one
8th bit is off

Multicast- one to many
8th bit is on

Broadcast- one to all
All 8 bits are on
------------------------
Cisco Modes:
Server
Client
Transparent - Be on the Trunking VLAN but pretend I aint here

DTP (Dynamic Trunking Protocol)
Should be disconfigured
Automatically uodates what trunks are allowed

Discovery Protocls
______
CDP (Cisco Discovery Protocol)
FDP (Foundation Discovery Protocol)
LLDP (Link Layer Discovery Protocol)

STP (Spanning Tree Protocol)
----------------------------
Tells a network the fastest way to get to the default gateway. If a device has not been used yet it will not be apart of the 'tree'. The time it takes for all device to end up on the tree is called convergence.
Root decision process
1-Elect Root Bridge
2-Identify the Root ports on non-bridge
3-Identift the Designated port for each segment
4-Set alternate ports to blocking state


Layer 2 Attack Mitigation Tehcniques
----------------------------------------
Shutdown Unused ports
Enable Port Security
Enable Port Security 
IP Source Guard
Manaully assign STOP Root
BPDU Guard


Hops away
How many hops away is a host. Find the traceroute (It is a bunch of Ping request and Time to live exceeded messages), then go to the bottom of that and the reply has a ttl. Subtract that from the OS's respective default TTL. That is how many hops away it is
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
String vs Integer

    String

        my_string = "Hello World"

    Number

        int = 1234

        float = 3.14

        hex = 0x45
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Built-In Functions

    int()

    len()

    str()

    sum()

    print()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Built-In Methods

    my_string.upper()

    my_string.lower()

    my_string.split()

    my_list.append()

    my_list.insert()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
How Imports Work

    import {module}

    import {module} as {name}

    from {module} import *

    from {module} import {function}

    from {module} import {function} as {name}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network Programming with Python3

    Network sockets primarily use the Python3 Socket library and socket.socket function.

import socket
  s = socket.socket(socket.FAMILY, socket.TYPE, socket.PROTOCOL)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
The socket.socket Function

    Inside the socket.socket. function, you have these arguments, in order:

socket.socket( *family*, *type*, *proto* )

    family: AF_INET*, AF_INET6, AF_UNIX

    type: SOCK_STREAM*, SOCK_DGRAM, SOCK_RAW

    proto: 0*, IPPROTO_TCP, IPPROTO_UDP, IPPROTO_IP, IPPROTO_ICMP, IPPROTO_RAW
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
STREAM SOCKET SENDER DEMO
#!/usr/bin/python3
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
ip_addr = '127.0.0.1'
port = 1111
s.connect((ip_addr, port))
message = b"Message"
s.send(message)
data, conn = s.recvfrom(1024)
print(data.decode('utf-8'))
s.close()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Stream Socket Receiver Demo

#!/usr/bin/python3
import socket
import os
port = 1111
message = b"Connected to TCP Server on port %i\n" % port
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind(('', port))
s.listen(1)
os.system("clear")
print ("Waiting for TCP connections\n")
while 1:
    conn, addr = s.accept()
    connect = conn.recv(1024)
    address, port = addr
    print ("Message Received - '%s'" % connect.decode())
    print ("Sent by -", address, "port -", port, "\n")
    conn.sendall(message)
    conn.close()
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Datagram Socket Sender Demo

#!/usr/bin/python3
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, 0)
ip_addr = '127.0.0.1'
port = 2222
message = b"Message"
s.sendto(message, (ip_addr, port))
data, addr = s.recvfrom(1024)
print(data.decode())
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Datagram Socket Receiver Demo

#!/usr/bin/python3
import socket
import os
port = 2222
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM,0)
s.bind(('', port))
os.system("clear")
print ("Awaiting UDP Messages")
while True:
    data, addr = s.recvfrom(1024)
    address, port = addr
    print ("\nMessage Received: '%s'" % data.decode())
    print ("Sent by -", address, "port", port)
    s.sendto(b"Message received by the UDP Message Server!", addr)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Raw IPV4 Sockets

    RAW Socket scripts must include the IP header and the next headers.

    Requires guidance from the "Request for Comments" (RFC) to follow header structure properly.

        RFCs contain technical and organizational documents about the Internet, including specifications and policy documents.

    See RFC 791, Section 3 - Specification for details on how to construct an IPv4 header.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Raw Socket Use Case

    Testing specific defense mechanisms - such as triggering and IDS for an effect, or filtering

    Avoiding defense mechanisms

    Obfuscating data during transfer

    Manually crafting a packet with the chosen data in header fields
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Encoding and Decoding

    Encoding

        The process of taking bits and converting them using a specified cipher.

    Decoding

        Reverse of the conversion process used by the specified cipher for encoding.

    Common encoding schemes

        UTF-8, Base64, Hex
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Encoding vs Encryption

    Encoding - converts data into a different format

    Encryption - scrambles data to make it unreadable without a secret key
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Hex Encoding and Decoding

Encode text to Hex:

echo "Message" | xxd

Encode file to Hex:

xxd file.txt file-encoded.txt

Decode file from Hex:

xxd -r file-encoded.txt file-decoded.txt
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python Hex Encoding

import binascii

message = b'Message'
hidden_msg = binascii.hexlify(message)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Base64 Encoding and Decoding

Encode text to base64:

echo "Message" | base64

Endode file to Base64:

base64 file.txt > file-encoded.txt

Decode file from Base64:

base64 -d file-encoded.txt > file-decoded.txt
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Python Base64 Encoding

import base64

message = b'Message'
hidden_msg = base64.b64encode(message)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NMAP
    Default Scan:

        User: TCP Full Connect Scan (-sT)

        Root: TCP SYN Scan (-sS)

    Default Ports scanned: 1000 most commonly used TCP or UDP ports
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NMAP Port States

    open

    closed

    filtered

    unfiltered

    open|filtered

    closed|filtered
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NMAP Scan Types

    Broadcast Ping/Ping sweep (-sP, -PE)

    SYN scan (-sS)

    Full connect scan (-sT)

    Null scan (-sN)

    FIN scan (-sF)

    XMAS tree scan (-sX)

    UDP scan (-sU)

    Idle scan (-sI)

    Decoy scan (-D)

    ACK/Window scan (-sA)

    RPC scan (-sR)

    FTP scan (-b)

    OS fingerprinting scan (-O)

    Version scan (-sV) <- This one is really good ("Especially in security")

    Discovery probes

    -PE - ICMP Ping

    -Pn - No Ping <- sometimes you can't get an icmp through
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NMAP - Time-Out

    -T0 - Paranoid - 300 Sec

    -T1 - Sneaky - 15 Sec

    -T2 - Polite - 1 Sec

    -T3 - Normal - 1 Sec

    -T4 - Aggresive - 500 ms <- just use this one

    -T5 - Insane - 250 ms
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NMAP - Delay

    --scan-delay <time> - Minimum delay between probes

    --max-scan-delay <time> - Max delay between probes
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
NMAP - Rate Limit

    --min-rate <number> - Minimum packets per second

    --max-rate <number> - Max packets per second
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Traceroute - Firewalking

traceroute 172.16.82.106
traceroute 172.16.82.106 -p 123
sudo traceroute 172.16.82.106 -I
sudo traceroute 172.16.82.106 -T
sudo traceroute 172.16.82.106 -T -p 443
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Netcat - Scanning

nc [Options] [Target IP] [Target Port(s)]

    -z : Port scanning mode i.e. zero I/O mode

    -v : Be verbose [use twice -vv to be more verbose]

    -n : do not resolve ip addresses

    -w1 : Set time out value to 1

    -u : To switch to UDP 
nc -zvnw1 <IP> <port or port range> 
for i in {1..254}; do nc -nvzw1 172.16.82.$i 20-23 80 2>&1 & done | grep -E 'succ|open' <- looks for open ports on tcp
for i in {1..254}; do nc -nuvzw1 172.16.82.$i 1000-2000 2>&1 & done | grep -E 'succ|open'

Netcat - Vertical Scanning

    Range of ports on specific IP

    TCP

nc -nzvw1 172.16.82.106 21-23 80 2>&1 | grep -E 'succ|open'

    UDP

nc -nuzvw1 172.16.82.106 1000-2000 2>&1 | grep -E 'succ|open'

Netcat - TCP Scan Script

#!/bin/bash
echo "Enter network address (e.g. 192.168.0): "
read net
echo "Enter starting host range (e.g. 1): "
read start
echo "Enter ending host range (e.g. 254): "
read end
echo "Enter ports space-delimited (e.g. 21-23 80): "
read ports
for ((i=$start; $i<=$end; i++))
do
    nc -nvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
done

Describe Methods Used for Passive Internal Discovery
recon3
Packet Sniffers

    Wireshark

    Tcpdump

    p0f

Limited to traffic in same local area of the network
Describe Methods Used for Active Internal Discovery
recon4
7.23
Netcat - Horizontal ScanningRange of IPs for specific portsTCP for i in {1..254}; do nc -nvzw1 172.16.82.$i 20-23 80 2>&1 & done | grep -E 'succ|open' 
for i in {1..254}; do nc -nuvzw1 172.16.82.$i 1000-2000 2>&1 & done | grep -E 'succ|open' <- UDP
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Netcat - Banner Grabbing

    Find what is running on a particular port

nc [Target IP] [Target Port]
nc 172.16.82.106 22
nc -u 172.16.82.106 53

    -u : To switch to UDP
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Curl and Wget

    Both can be used to interact with the HTTP, HTTPS and FTP protocols.

    Curl - Displays ASCII

curl http://172.16.82.106
curl ftp://172.16.82.106

    Wget - Downloads (-r recursive)

wget -r http://172.16.82.106
wget -r ftp://172.16.82.106
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DNS configuration

Windows: ipconfig /displaydns
Linux: cat /etc/resolv.conf
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IP Configuration

Windows: ipconfig /all
Linux: ip address (ifconfig depreciated)
VyOS: show interface
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ARP Cache

Windows: arp -a
Linux: ip neighbor (arp -a depreciated)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network connections

Windows: netstat
Linux: ss (netstat depreciated)

Example options useful for both netstat and ss: -antp
a = Displays all active connections and ports.
n = No determination of protocol names. Shows 22 not SSH.
t = Display only TCP connections.
u = Display only UDP connections.
p = Shows which processes are using which sockets.
l = listening ports
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
/etc/hosts DNS cache and DNS server all resolve ips to hostnames
Services File

Windows: %SystemRoot%\system32\drivers\etc\services resolves service names

Linux/Unix: /etc/services                           resolves service names
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
OS Information

Windows: systeminfo
Linux: uname -a and /etc/os-release
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Running Processes

Windows: tasklist
Linux: ps or top

Example options useful for ps: -elf
e = Show all running processes
l = Show long format view
f = Show full format listing
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Command path

which
whereis
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Routing Table

Windows: route print
Linux: ip route (netstat -r deprecated)
VyOS: show ip route

Quite possibly may cross reference with arp cache to cross off an ip to investigate
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
File search

find / -name hint* 2> /dev/null
find / -iname flag* 2> /dev/null
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
SSH Config

Windows: C:\Windows\System32\OpenSSH\sshd_config
Linux: /etc/ssh/sshd_config
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ACTIVE INTERNAL
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

ARP Scanning

arp-scan --interface=eth0 --localnet

nmap -sP -PR 172.16.82.96/27
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ping Scanning

ping -c 1 172.16.82.106

for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done

sudo nmap -sP 172.16.82.96/27
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
DEV TCP Banner Grab

exec 3<>/dev/tcp/172.16.82.106/22; echo -e "" >&3; cat <&3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
DEV TCP Scanning

for p in {1..1023}; do(echo >/dev/tcp/172.16.82.106/$p) >/dev/null 2>&1 && echo "$p open"; done
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Perform Network Forensics
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network Forensics - Mapping

    Diagram devices

    Line Types

    Written Information

    Coloring

    Groupings

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network Forensics - Mapping

    Device type (Router/host)

    System Host-names

    Interface names (eth0, eth1, etc)

    IP address and CIDRs for all interfaces

    TCP and UDP ports

    MAC Address

    OS type/version

    Known credentials
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Network Mapping Tools

    Draw.io Local (Template)

    Draw.io Web

    Witeboard.com

    Draw.Chat

    SmartDraw

    Ziteboard
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Common iptable options

-t - Specifies the table. (Default is filter)
-A - Appends a rule to the end of the list or below specified rule
-I - Inserts the rule at the top of the list or above specified rule
-R - Replaces a rule at the specified rule number
-D - Deletes a rule at the specified rule number
-F - Flushes the rules in the selected chain
-L - Lists the rules in the selected chain using standard formatting
-S - Lists the rules in the selected chain without standard formatting
-P - Sets the default policy for the selected chain
-n - Disables inverse lookups when listing rules
--line-numbers - Prints the rule number when listing rules
-p - Specifies the protocol
-i - Specifies the input interface
-o - Specifies the output interface
--sport - Specifies the source port
--dport - Specifies the destination port
-s - Specifies the source IP
-d - Specifies the destination IP
-j - Specifies the jump target action
    Tutorialspoint Whiteboard
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
iptables syntax

iptables -t [table] -A [chain] [rules] -j [action]

    Table: filter*, nat, mangle

    Chain: INPUT, OUTPUT, PREROUTING, POSTROUTING, FORWARD
-i [ iface ]

-o [ iface ]

-s [ ip.add | network/CIDR ]

-d [ ip.add | network/CIDR ]

-p icmp [ --icmp-type type# { /code# } ]

-p tcp [ --sport | --dport { port1 |  port1:port2 } ]

-p tcp [ --tcp-flags SYN,ACK,PSH,RST,FIN,URG,ALL,NONE ]

-p udp [ --sport | --dport { port1 | port1:port2 } ]

    -m to enable iptables extensions:

-m state --state NEW,ESTABLISHED,RELATED,UNTRACKED,INVALID

-m mac [ --mac-source | --mac-destination ] [mac]

-p [tcp|udp] -m multiport [ --dports | --sports | --ports { port1 | port1:port15 } ]

-m bpf --bytecode [ 'bytecode' ]

-m iprange [ --src-range | --dst-range { ip1-ip2 } ]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
iptables action syntax

    ACCEPT - Allow the packet

    REJECT - Deny the packet (send an ICMP reponse)

    DROP - Deny the packet (send no response)

-j [ ACCEPT | REJECT | DROP ]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Flush table

    iptables -t [table] -F

    Change default policy

    iptables -t [table] -P [chain] [action]

    Lists rules with rule numbers

    iptables -t [table] -L --line-numbers

    Lists rules as commands interpreted by the system
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Inserts rule before Rule number

    iptables -t [table] -I [chain] [rule num] [rules] -j [action]

    Replaces rule at number

    iptables -t [table] -R [chain] [rule num] [rules] -j [action]

    Deletes rule at number

    iptables -t [table] -D [chain] [rule num]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
NFTables families

    ip - IPv4 packets

    ip6 - IPv6 packets

    inet - IPv4 and IPv6 packets

    arp - layer 2

    bridge - processing traffic/packets traversing bridges.

    netdev - allows for user classification of packets - nftables passes up to the networking stack (no counterpart in iptables)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
NFTables hooks

    ingress - netdev only

    prerouting

    input

    forward

    output

    postrouting
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
NFTables Chain-types

There are three chain types:

    filter - to filter packets - can be used with arp, bridge, ip, ip6, and inet families

    route - to reroute packets - can be used with ip and ipv6 families only

    nat - used for Network Address Translation - used with ip and ip6 table families only
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Create the Table (There is no default table)

nft add table [family] [table]

    [family] = ip*, ip6, inet, arp, bridge and netdev.

    [table] = user provided name for the table.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Create the Base Chain

nft add chain [family] [table] [chain] { type [type] hook [hook]
    priority [priority] \; policy [policy] \;}

* [chain] = User defined name for the chain.

* [type] =  can be filter, route or nat.

* [hook] = prerouting, ingress, input, forward, output or
         postrouting.

* [priority] = user provided integer. Lower number = higher
             priority. default = 0. Use "--" before
             negative numbers.

* ; [policy] ; = set policy for the chain. Can be
              accept (default) or drop.

 Use "\" to escape the ";" in bash
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Create a rule in the Chain

nft add rule [family] [table] [chain] [matches (matches)] [statement]

* [matches] = typically protocol headers(i.e. ip, ip6, tcp,
            udp, icmp, ether, etc)

* (matches) = these are specific to the [matches] field.

* [statement] = action performed when packet is matched. Some
              examples are: log, accept, drop, reject,
              counter, nat (dnat, snat, masquerade)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Rule Match options

ip [ saddr | daddr { ip | ip1-ip2 | ip/CIDR | ip1, ip2, ip3 } ]

tcp flags { syn, ack, psh, rst, fin }

tcp [ sport | dport { port1 | port1-port2 | port1, port2, port3 } ]

udp [ sport| dport { port1 | port1-port2 | port1, port2, port3 } ]

icmp [ type | code { type# | code# } ]

ct state { new, established, related, invalid, untracked }

iif [iface]

oif [iface]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
---nft { list | flush } ruleset

nft { delete | list | flush } table [family] [table]

nft { delete | list | flush } chain [family] [table] [chain]
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    List table with handle numbers

    nft list table [family] [table] [-a]

    Adds after position

    nft add rule [family] [table] [chain] [position <position>] [matches] [statement]

    Inserts before position

    nft insert rule [family] [table] [chain] [position <position>] [matches] [statement]

    Replaces rule at handle

    nft replace rule [family] [table] [chain] [handle <handle>] [matches] [statement]

    Deletes rule at handle

    nft delete rule [family] [table] [chain] [handle <handle>]
    
To change the current policy
    nft add chain [family] [table] [chain] { \; policy [policy] \;}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Summary of nft:

      name of the table v     v Name of the chain                  v ip in questions          
sudo nft add <rule> ip COSC OUTPUT <tcp, udp, ip, icmp> daddr 172.16.40.10 {accept, drop}
                ^Replace with what you want to add        ^ source or destination addr
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
PAT is like NAT except it applies to multiple ips
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
NAT and PAR Operators and Chains
operator    Applicable Chains
________    __________________
snat -         postrouting
               input
______________________________
masquerade -   postrouting
______________________________
dnat-          prerouting
               output
_______________________________
redirect -     prerouting
               output
_______________________________
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
iptables -t nat -A POSTROUTING -o eth0 -s 192.168.0.1 -j SNAT --to 1.1.1.1 <- changes the source ip of sent packets to 1.1.1.1 (ip spoofing)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
iptables -t nat -A POSTROUTING -p tcp -o eth0 -s 192.168.0.1 -j SNAT --to 1.1.1.1:9001 <- changes the source port of sent packets (packet spoofing)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE <- changes all packets sent to have the same source ip as eth0
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
iptables -t nat -A PREROUTING -i eth0 -d 8.8.8.8 -j DNAT --to 10.0.0.1 <- changes the destination ip of recieved packets to 10.0.0.1
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Destination NAT

iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 22 -j DNAT --to 10.0.0.1:22
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to 10.0.0.2:80
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j DNAT --to 10.0.0.3:443
iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
changes inbound taffic to certain ips or ports. 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
nft add rule ip NAT POSTROUTING ip saddr 10.10.0.40 oif eth0 snat 144.15.60.11

nft add rule ip NAT POSTROUTING oif eth0 masquerade
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Create the NAT table

    nft add table ip NAT

    Create the NAT chains

    nft add chain ip NAT PREROUTING { type nat hook prerouting priority 0 \; }

    nft add chain ip NAT POSTROUTING { type nat hook postrouting priority 0 \; }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ft add rule ip NAT PREROUTING iif eth0 ip daddr 144.15.60.11 dnat 10.10.0.40

nft add rule ip NAT PREROUTING iif eth0 tcp dport { 80, 443 } dnat 10.1.0.3

nft add rule ip NAT PREROUTING iif eth0 tcp dport 80 redirect to 8080
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mangle Examples

iptables -t mangle -A POSTROUTING -o eth0 -j TTL --ttl-set 128     <- sets ttl of outbound packets to 128

iptables -t mangle -A POSTROUTING -o eth0 -j DSCP --set-dscp 26     <- sets dscp value of outbound packets to 26
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mangle examples with nftables


nft add table ip MANGLE

nft add chain ip MANGLE INPUT {type filter hook input priority 0 \; policy accept \;}

nft add chain ip MANGLE OUTPUT {type filter hook output priority 0 \; policy accept \;}

nft add rule ip MANGLE OUTPUT oif eth0 ip ttl set 128

nft add rule ip MANGLE OUTPUT oif eth0 ip dscp set 26
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
port 80 NEW and ESTABLISHED connections are ACCEPTed
student@blue-int-dmz-host-1-student-6:~$ sudo iptables -A INPUT -p tcp --sport 80 -m state --state NEW -j ACCEPT  
student@blue-int-dmz-host-1-student-6:~$ sudo iptables -A INPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT  
student@blue-int-dmz-host-1-student-6:~$ sudo iptables -A INPUT -p tcp --dport 80 -m state --state ESTABLISHED -j ACCEPT  
student@blue-int-dmz-host-1-student-6:~$ sudo iptables -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT  
student@blue-int-dmz-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT  
student@blue-int-dmz-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp --dport 80 -m state --state ESTABLISHED -j ACCEPT  
student@blue-int-dmz-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT  
student@blue-int-dmz-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp --sport 80 -m state --state NEW -j ACCEPT
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ICMP echo and reply are accepted
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -d 10.10.0.40 -p icmp --icmp-type echo-reply -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -s 10.10.0.40 -p icmp --icmp-type echo-reply -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -s 10.10.0.40 -p icmp --icmp-type echo-reply -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -d 10.10.0.40 -p icmp --icmp-type echo-reply -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -d 10.10.0.40 -p icmp --icmp-type echo-request -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -s 10.10.0.40 -p icmp --icmp-type echo-request -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -s 10.10.0.40 -p icmp --icmp-type echo-request -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -d 10.10.0.40 -p icmp --icmp-type echo-request -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -p udp -m multiport --ports 6579,4444 -j ACCEPTUT -p udp -m multiport --pstudent@blue-host-1-student-6:~$ sudo iptables -A INPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT 
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp --dport 80 -m state --state ESTABLISHED -j ACCEPT 
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -p tcp --dport 80 -m state --state ESTABLISHED -j ACCEPT 
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT 
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -p tcp --sport 80 -m state --state NEW -j ACCEPT 
student@blue-host-1-student-6:~$ sudo iptables -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT 
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT 
student@blue-host-1-student-6:~$ sudo iptables -A OUTPUT -p tcp --sport 80 -m state --state NEW -j ACCEPT
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
sudo nft add rule ip CCTC INPUT tcp dport {22, 3389, 23} ct state {new, established} accept
student@blue-host-3-student-6:~$ sudo nft add rule ip CCTC INPUT tcp sport {22, 3389, 23} ct state {new, established} accept
student@blue-host-3-student-6:~$ sudo nft add rule ip CCTC OUTPUT tcp sport {22, 3389, 23} ct state {new, established} accept
student@blue-host-3-student-6:~$ sudo nft add rule ip CCTC OUTPUT tcp dport {22, 3389, 23} ct state {new, established}
student@blue-host-3-student-6:~$ sudo nft add rule ip CCTC OUTPUT tcp dport {6010, 6011, 6012} ct state {new, established}
student@blue-host-3-student-6:~$ sudo nft add rule ip CCTC OUTPUT tcp sport {6010, 6011, 6012} ct state {new, established}
student@blue-host-3-student-6:~$ sudo nft add rule ip CCTC INPUT tcp sport {6010, 6011, 6012} ct state {new, established}
student@blue-host-3-student-6:~$ sudo nft add rule ip CCTC INPUT tcp dport {6010, 6011, 6012} ct state {new, established}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
nft add rule ip CCTC INPUT icmp type|code {<type>|<code>} saddr 10.10.0.40
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
T2 Access List
able ip CCTC {
	chain INPUT {
		type filter hook input priority 0; policy drop;
		tcp dport { ssh, telnet, 3389, 6010, 6011, 6012 } ct state { established, new } accept
		tcp sport { ssh, telnet, 3389, 6010, 6011, 6012 } ct state { established, new } accept
		icmp code { 0 } ip saddr 10.10.0.40
		icmp code { 0 } ip daddr 10.10.0.40
		icmp code { 8 } ip daddr 10.10.0.40
		icmp code { 8 } ip saddr 10.10.0.40
		tcp sport { mmcc, 5150 }
		tcp dport { mmcc, 5150 }
		udp dport { mmcc, 5150 }
		udp sport { mmcc, 5150 }
		tcp sport { http } ct state { established, new }
		tcp dport { http } ct state { established, new }
		icmp code { 0 } ip saddr 10.10.0.40 accept
		icmp code { 0 } ip daddr 10.10.0.40 accept
		icmp code { 8 } ip daddr 10.10.0.40 accept
		icmp code { 8 } ip saddr 10.10.0.40 accept
		tcp sport { mmcc, 5150 } accept
		tcp dport { mmcc, 5150 } accept
		udp dport { mmcc, 5150 } accept
		udp sport { mmcc, 5150 } accept
		tcp sport { http } ct state { established, new } accept
		tcp dport { http } ct state { established, new } accept
	}

	chain OUTPUT {
		type filter hook output priority 0; policy drop;
		tcp sport { ssh, telnet, 3389, 6010, 6011, 6012 } ct state { established, new } accept
		tcp dport { ssh, telnet, 3389, 6010, 6011, 6012 } ct state { established, new } accept
		icmp code { 0 } ip daddr 10.10.0.40
		icmp code { 0 } ip saddr 10.10.0.40
		icmp code { 8 } ip saddr 10.10.0.40
		icmp code { 8 } ip daddr 10.10.0.40
		tcp dport { mmcc, 5150 }
		tcp sport { mmcc, 5150 }
		udp sport { mmcc, 5150 }
		udp dport { mmcc, 5150 }
		tcp dport { http } ct state { established, new }
		tcp sport { http } ct state { established, new }
		icmp code { 0 } ip daddr 10.10.0.40 accept
		icmp code { 0 } ip saddr 10.10.0.40 accept
		icmp code { 8 } ip saddr 10.10.0.40 accept
		icmp code { 8 } ip daddr 10.10.0.40 accept
		tcp dport { mmcc, 5150 } accept
		tcp sport { mmcc, 5150 } accept
		udp sport { mmcc, 5150 } accept
		udp dport { mmcc, 5150 }
		udp dport { mmcc, 5150 } accept
		tcp dport { http } ct state { established, new } accept
		tcp sport { http } ct state { established, new } accept
	}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    iptables -t [table] -S
MAKE A TEMPLATE FOR A DEVICE:
Hostname:
eth0:
ports:
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ssh then note host name
ip a and note loopback + eth0 ip
which nc 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
wget if port 80 is open
if theres an index then cat it. nginx is a dead end.
nc localhost 9007 <- bannergrabs port 9007
'experimental FTP' is a dead end
ssh vyos@blue-IPS 
/29 is usually used to connect routers
ethX is probably a default gateway for a subnet

which nmap
nmap -Pn <network id/cidr> -T4 -p21-23, 80 (--open) -v will make it tell you about shit








sudo nft add rule ip NAT POSTROUTING iif eth0 ip daddr 192.168.3.30  dnat 172.16.82.112

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
DELETE ALL THE STUFF CURRENTLY IN THE POST AND PREROUTING CHAINS AND THEN RUN THIS.


A router receives a 5000 byte packet on eth0. The MTU for the outbound interface (eth1) is 1500. What would the fragmentation offset increment be with the conditions below?
184
